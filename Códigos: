Projeto 1: ChromaKey:

python:

import cv2
import numpy as np
import matplotlib.pyplot as plt

green_screen = cv2.imread(r"C:\Users\Aaron\Documents\College work\Av2 Proc Imagens\Projeto 1 (Chroma Key)\img_fundo_verde_3.png")
background = cv2.imread(r"C:\Users\Aaron\Documents\College work\Av2 Proc Imagens\Projeto 1 (Chroma Key)\background_2.png")

background = cv2.resize(background, (green_screen.shape[1], green_screen.shape[0]))

hsv = cv2.cvtColor(green_screen, cv2.COLOR_BGR2HSV)

lower_green = np.array([35, 40, 40])
upper_green = np.array([85, 255, 255])

mask = cv2.inRange(hsv, lower_green, upper_green)

mask_inv = cv2.bitwise_not(mask)

people = cv2.bitwise_and(green_screen, green_screen, mask=mask_inv)

bg = cv2.bitwise_and(background, background, mask=mask)

final = cv2.add(people, bg)

final_rgb = cv2.cvtColor(final, cv2.COLOR_BGR2RGB)

plt.imshow(final_rgb)
plt.title("Chroma Key Result") 
plt.axis("off")                
plt.show()


Projeto 2:Detecção de Círculos.

import cv2
import numpy as np
import matplotlib.pyplot as plt

img = cv2.imread(r"C:\Users\Aaron\Downloads\AV2_IMAGENS\AV2_IMAGENS\projeto_2\circulos_1.png")

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

plt.imshow(img)

plt.imshow(gray)

gray = cv2.medianBlur(gray, 11)

plt.imshow(gray)

circles = cv2.HoughCircles(
    gray,
    cv2.HOUGH_GRADIENT,
    dp=1.2,
    minDist=30,
    param1=100,
    param2=30,
    minRadius=70,
    maxRadius=100
)

if circles is not None:
    circles = np.uint16(np.around(circles))
    for x, y, r in circles[0, :]:
        cv2.circle(img, (x, y), r, (0, 255, 0), 2)
        cv2.circle(img, (x, y), 2, (0, 0, 255), 3)

num_circles = len(circles[0])
print(f"Number of circles detected: {num_circles}")

img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(img_rgb)
plt.title("Detected Circles")
plt.axis("off")
plt.show()

Projeto 3: Detecção de folhas danificadas.

import cv2
import numpy as np
import matplotlib.pyplot as plt

img = cv2.imread(r"C:\Users\Aaron\Downloads\AV2_IMAGENS\AV2_IMAGENS\projeto_3\img_folha_3.JPG")
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

lower_green = np.array([35, 40, 40])
upper_green = np.array([85, 255, 255])

lower_brown = np.array([10, 100, 20])
upper_brown = np.array([20, 255, 200])

green_mask = cv2.inRange(hsv, lower_green, upper_green)
brown_mask = cv2.inRange(hsv, lower_brown, upper_brown)

green_part = cv2.bitwise_and(img, img, mask=green_mask)
brown_part = cv2.bitwise_and(img, img, mask=brown_mask)

def show_img(title, img):
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    plt.imshow(img_rgb)
    plt.title(title)
    plt.axis("off")
    plt.show()

show_img("Green Areas", green_part)
show_img("Brown Areas", brown_part)

non_green_mask = cv2.bitwise_not(green_mask)
damaged_parts = cv2.bitwise_and(img, img, mask=non_green_mask)
damaged_rgb = cv2.cvtColor(damaged_parts, cv2.COLOR_BGR2RGB)

plt.imshow(damaged_rgb) 
plt.title("Damaged / Non-Green Areas")
plt.axis("off")
plt.show()
